- id: '1640833273099'
  alias: NWS Announce Weather Alert for Tornado
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.weatheralerts_active_alerts
    attribute: tornado_warning_count
    above: '0'
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.tornado_alarm
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id:
      - input_boolean.white_noise_kallen_bedroom
      - input_boolean.white_noise_basement
      - input_boolean.white_noise_emma_bedroom
    alias: Turn off white noise
  - service: script.turn_on
    target:
      entity_id: script.max_brightness
  - service: script.text_notify
    data:
      type: critical
      title: Tornado Warning - TAKE COVER!
      message: The National Weather Service has issued a Tornado Warning for our area.
        Take Cover NOW!!!!
      who: all
      tag: tornado-warning
    alias: CRITICAL PHONE ALERT
  - service: script.tv_notify
    data:
      who: all
      title: Tornado Warning - TAKE COVER!
      message: The National Weather Service has issued a Tornado Warning for our area.
        Take Cover NOW!!!!
    alias: TV Alert
  - service: script.speech_engine
    data:
      who: everywhere
      message: A tornado warning has been issued, please take cover immediately! A
        tornado warning has been issued, please take cover immediately! A tornado
        warning has been issued, please take cover immediately!
      type: alert
    alias: Elevated TTS alert
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - service: script.speech_engine
    data:
      who: everywhere
      message: A tornado warning has been issued, please take cover immediately! A
        tornado warning has been issued, please take cover immediately! A tornado
        warning has been issued, please take cover immediately!
      type: critical
    alias: CRITICAL TTS ALERT
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  mode: single
- id: '1640916845901'
  alias: Cast to Chromecast
  description: ''
  use_blueprint:
    path: kind3r/cast-and-re-cast-a-lovelace-view-to-a-google-hub.yaml
    input:
      dashboard: lovelace
      player: media_player.living_room_tv
      view: chromecast
- id: '1640989510134'
  alias: New Years
  description: Flash lights for New Years
  trigger:
  - platform: time
    at: 00:00:00
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.dining_room_lamp
    alias: Turn off dining room lamp
  - service: switch.turn_off
    target:
      entity_id:
      - switch.adaptive_lighting_basement_studio
      - switch.adaptive_lighting_kallen_bedroom
      - switch.adaptive_lighting_living_room
      - switch.adaptive_lighting_master_bedroom
      - switch.adaptive_lighting_mud_room
      - switch.adaptive_lighting_upstairs_hallway
      - switch.adaptive_lighting_tina_lamp
      - switch.animated_scene_christmas
    data: {}
    alias: Prepare affected lighting areas
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
    alias: Delay to make sure all switches turn off
  - service: light.turn_on
    target:
      entity_id:
      - light.hallway_overhead
      - light.kallen_bedroom_lights
      - light.living_room_color_1
      - light.living_room_color_2
      - light.living_room_color_3
      - light.master_bedroom_front
      - light.master_bedroom_side
      - light.mud_room_overhead
      - light.tina_desk_strip
      - light.tina_lamp_top
      - light.tina_lamp_side
      - light.basement_led_strip_1
      - light.basement_short_lamp
      - light.basement_stairwell
      - light.basement_tall_lamp
      - light.front_porch_light
    data:
      color_name: red
      brightness_pct: 100
    alias: Turn on lights, change to red for capable bulbs
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
    alias: Delay to wait for lights to turn on
  - service: light.turn_on
    target:
      entity_id:
      - light.hallway_overhead
      - light.kallen_bedroom_lights
      - light.living_room_color_1
      - light.living_room_color_2
      - light.living_room_color_3
      - light.master_bedroom_front
      - light.master_bedroom_side
      - light.mud_room_overhead
      - light.tina_desk_strip
      - light.tina_lamp_top
      - light.tina_lamp_side
      - light.basement_led_strip_1
      - light.basement_short_lamp
      - light.basement_stairwell
      - light.basement_tall_lamp
      - light.front_porch_light
    data:
      flash: long
    alias: Flash lights
  - service: script.speech_engine
    data:
      who: common
      message: Happy new year! Heres to 2023!
    alias: Send TTS notification to the common areas
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
    alias: Let the things happen
  - service: switch.turn_on
    target:
      entity_id:
      - switch.adaptive_lighting_basement_studio
      - switch.adaptive_lighting_kallen_bedroom
      - switch.adaptive_lighting_master_bedroom
      - switch.adaptive_lighting_upstairs_hallway
      - switch.animated_scene_christmas
    data: {}
    alias: Restore previous functionality on second floor and front porch
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.adaptive_on_first_floor
    alias: Return first floor to adaptive lighting
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
    alias: Delay because adaptive lighting is stupid sometimes
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.night_mode_on_second_floor
    alias: Return second floor to night mode
  - service: input_select.select_option
    data:
      option: Reset
    target:
      entity_id: input_select.tina_desk_scenes
    alias: Reset Tina desk scene
  mode: single
- id: '1641101491581'
  alias: Family Has Arrived
  description: Runs when family arrives at home
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.parents_home
    not_from: unavailable
    to: 'on'
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: binary_sensor.internet
      state: 'off'
  action:
  - if:
    - condition: state
      entity_id: binary_sensor.early_night_mode
      state: 'on'
    then:
    - service: script.family_is_home_night
      data: {}
    else:
    - service: script.family_is_home_day
      data: {}
    alias: Check early night mode, choose which script to run
  mode: restart
- id: '1641102018783'
  alias: Family Has Left
  description: Runs when the family has left home
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.parents_home
    not_from: unavailable
    to: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: not
    conditions:
    - condition: state
      entity_id: binary_sensor.internet
      state: 'off'
  action:
  - service: script.family_is_away
    data: {}
  mode: single
- id: '1643321652916'
  alias: Time-Based Presence Simulation
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.parents_home
    to: 'off'
    for:
      hours: 1
      minutes: 0
      seconds: 0
  condition: []
  action:
  - service: switch.turn_on
    target:
      entity_id: switch.presence_simulation
  mode: single
- id: '1644510872801'
  alias: iCloud3 Restart
  description: For restarting iCloud3 when my phone goes off the rails
  trigger:
  - platform: state
    entity_id: sensor.tony_s_iphone_info
    to: ●● PAUSED ●●
  condition: []
  action:
  - service: device_tracker.icloud3_restart
    data: {}
  mode: single
- id: '1645738561470'
  alias: Cast to Basement TV
  description: ''
  use_blueprint:
    path: kind3r/cast-and-re-cast-a-lovelace-view-to-a-google-hub.yaml
    input:
      dashboard: lovelace
      player: media_player.basement_tv_chromecast
      view: chromecast
- id: '1651785688186'
  alias: Watchman Audit on Startup
  description: Runs the Watchman Audit script after Home Assistant has successfully
    started up
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - service: watchman.report
    data: {}
    alias: Watchman Report
  mode: single
- id: '1651787468337'
  alias: Reboot handling
  description: ''
  trigger:
  - platform: homeassistant
    event: start
    id: hass_start
  - platform: homeassistant
    event: shutdown
    id: hass_stop
  condition: []
  action:
  - if:
    - condition: trigger
      id: hass_start
      alias: Startup
    then:
    - delay:
        hours: 0
        minutes: 1
        seconds: 0
        milliseconds: 0
    - service: automation.turn_on
      data: {}
      target:
        entity_id:
        - automation.family_has_arrived
        - automation.family_has_left
        - automation.scheduled_alarm_rearm
        - automation.scheduled_alarm_disarm
    - service: switch.turn_off
      target:
        entity_id:
        - switch.presence_simulation
      data: {}
    - if:
      - condition: and
        conditions:
        - condition: state
          entity_id: input_boolean.holiday_mode
          state: 'on'
          alias: Is holiday mode on?
        - condition: state
          entity_id: binary_sensor.early_night_mode
          state: 'on'
          alias: Is early night mode on?
        alias: Test conditions
      then:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.animated_scene_{{ states('input_select.holiday_animation')
            | lower }}
        alias: Turn on the appropriate animated holiday scene
      alias: Turn on animated holiday scene if night time and holiday mode is on
    - service: script.tony_desktop_refresh
      data: {}
    - service: script.tina_desktop_refresh
      data: {}
    - service: script.asus_laptop_refresh
      data: {}
    - service: script.kallen_desktop_refresh
      data: {}
    - service: script.win10vm_refresh
      data: {}
    - service: mqtt.publish
      data:
        topic: house/basement/server/glances
        payload: restart
        qos: 0
        retain: false
      alias: Restart Glances via MQTT
    - service: script.volume_reset
      data: {}
      alias: Reset all speaker volumes
    - if:
      - condition: state
        entity_id: input_boolean.studio_quiet
        state: 'off'
      then:
      - service: script.status_annc
        data:
          who: basement
          call_ha_started: 1
      else:
      - stop: Studio has requested quiet, and Jarvis respects this
      alias: Announce back online, unless studio has requested quiet
  - if:
    - condition: trigger
      id: hass_stop
      alias: Shutdown
    then:
    - service: automation.turn_off
      data:
        stop_actions: true
      target:
        entity_id:
        - automation.family_has_arrived
        - automation.family_has_left
  mode: queued
- id: '1654547257475'
  alias: Battery Monitoring
  description: Monitor all battery-powered things for low battery states
  use_blueprint:
    path: sbyx/low-battery-level-detection-notification-for-all-battery-sensors.yaml
    input:
      time: '11:00:00'
      exclude:
        entity_id:
        - sensor.iphone_battery_level
        - sensor.kallen_iphone_battery_level
        - sensor.tinas_ipad_battery_level
        - sensor.tony_s_iphone_battery_level
        - sensor.tony_s_ipad_battery_level
      actions:
      - service: script.text_notify
        data:
          type: normal
          who: tony
          title: Low Batteries in House
          message: 'Low battery alert for: {{sensors}}'
          tag: battery-monitoring
- id: '1655493590791'
  alias: NWS Announce Weather Alert for Tornado (CLEAR)
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.weatheralerts_active_alerts
    attribute: tornado_warning_count
    below: '1'
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.tornado_alarm
    state: 'on'
  action:
  - service: script.text_notify
    data:
      type: alert
      who: all
      message: clear_notification
      tag: tornado-warning
    alias: Clear critical notification
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.tornado_alarm
  - service: script.volume_reset
    data: {}
  - service: script.max_brightness_cleanup
    data: {}
  - service: script.text_notify
    data:
      title: Tornado Warning is cleared
      message: Check your surroundings and make sure it is safe to leave cover
      who: all
      type: alert
      tag: tornado-cleared
  - service: script.tv_notify
    data:
      title: Tornado Warning is cleared
      message: Check your surroundings and make sure it is safe to leave cover
      who: all
  - service: script.speech_engine
    data:
      who: everywhere
      message: Tornado warning has been cleared. Check your surroundings and make
        sure it is safe to leave cover.
      type: alert
  - wait_template: '{{ is_state(''input_boolean.tornado_alarm'',''on'') }}'
    continue_on_timeout: true
    timeout: 00:05:00
    alias: Make sure no further warnings are issued
  - if:
    - condition: state
      entity_id: input_boolean.tornado_alarm
      state: 'off'
    then:
    - if:
      - condition: or
        conditions:
        - condition: time
          before: input_datetime.audible_notification_on
          alias: Before audible notifications on
        - condition: time
          after: input_datetime.audible_notification_off
          alias: After audible notifications off
        alias: Should audible notifications be off
      then:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.audible_notifications
      else:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.audible_notifications
    else:
    - stop: Tornado alert re-activated
  mode: single
- id: '1667341156218'
  alias: White Noise
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.white_noise_emma_bedroom
    to: 'on'
    from: 'off'
    id: emma-on
  - platform: state
    entity_id:
    - input_boolean.white_noise_basement
    to: 'on'
    from: 'off'
    id: basement-on
  - platform: state
    entity_id:
    - input_boolean.white_noise_kallen_bedroom
    to: 'on'
    from: 'off'
    id: kallen-on
  - platform: state
    entity_id:
    - input_boolean.white_noise_emma_bedroom
    from: 'on'
    to: 'off'
    id: emma-off
  - platform: state
    entity_id:
    - input_boolean.white_noise_basement
    from: 'on'
    to: 'off'
    id: basement-off
  - platform: state
    entity_id:
    - input_boolean.white_noise_kallen_bedroom
    from: 'on'
    to: 'off'
    id: kallen-off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: emma-on
      sequence:
      - alias: Start river sounds
        service: google_assistant_sdk.send_text_command
        data:
          command: give me river noise on emma bedroom speaker
      - service: media_player.volume_set
        data:
          volume_level: '{{ states(''input_number.emma_bedroom_google_speaker_night_volume'')
            }}'
        target:
          entity_id: media_player.emma_bedroom_google_speaker
        alias: Set volume
    - conditions:
      - condition: trigger
        id: basement-on
      sequence:
      - alias: Start river sounds
        service: google_assistant_sdk.send_text_command
        data:
          command: give me thunderstorm sounds on basement studio speaker
      - service: media_player.volume_set
        data:
          volume_level: '{{ states(''input_number.basement_google_speaker_night_volume'')
            }}'
        target:
          entity_id: media_player.basement_google_speaker
        alias: Set volume
    - conditions:
      - condition: trigger
        id: kallen-on
      sequence:
      - alias: Start river sounds
        service: google_assistant_sdk.send_text_command
        data:
          command: give me river noise on kallen bedroom speaker
      - service: media_player.volume_set
        data:
          volume_level: '{{ states(''input_number.kallen_bedroom_google_speaker_night_volume'')
            }}'
        target:
          entity_id: media_player.kallen_bedroom_google_speaker
        alias: Set volume
    - conditions:
      - condition: trigger
        id: emma-off
      sequence:
      - service: media_player.turn_off
        data: {}
        target:
          entity_id: media_player.emma_bedroom_google_speaker
        alias: Turn off speaker
      - alias: If Emma is awake, reset volume
        if:
        - condition: state
          entity_id: input_boolean.emma_sleeping
          state: 'off'
        then:
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
        - service: media_player.volume_set
          data:
            volume_level: "{% if is_state('input_boolean.give_me_darkness','on') %}\n
              \ {{ states('input_number.emma_bedroom_google_speaker_night_volume')
              }}\n{% else %}\n  {{ states('input_number.emma_bedroom_google_speaker_day_volume')
              }}\n{% endif %}\n"
          target:
            entity_id: media_player.emma_bedroom_google_speaker
          alias: Reset volume
    - conditions:
      - condition: trigger
        id: basement-off
      sequence:
      - service: media_player.turn_off
        data: {}
        target:
          entity_id: media_player.basement_google_speaker
        alias: Turn off speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
      - service: media_player.volume_set
        data:
          volume_level: "{% if is_state('input_boolean.give_me_darkness','on') %}\n
            {{ states('input_number.basement_google_speaker_night_volume') }}\n{%
            else %}\n  {{ states('input_number.basement_google_speaker_day_volume')
            }}\n{% endif %}\n"
        target:
          entity_id: media_player.basement_google_speaker
        alias: Reset volume
    - conditions:
      - condition: trigger
        id: kallen-off
      sequence:
      - service: media_player.turn_off
        data: {}
        target:
          entity_id: media_player.kallen_bedroom_google_speaker
        alias: Turn off speaker
      - alias: If Kallen is awake, reset volume
        if:
        - condition: and
          conditions:
          - condition: state
            entity_id: input_boolean.kallen_sleeping
            state: 'off'
          - condition: state
            entity_id: input_boolean.kallen_morning_briefing
            state: 'off'
        then:
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
        - service: media_player.volume_set
          data:
            volume_level: "{% if is_state('input_boolean.give_me_darkness','on') %}\n
              \ {{ states('input_number.kallen_bedroom_google_speaker_night_volume')
              }}\n{% else %}\n  {{ states('input_number.kallen_bedroom_google_speaker_day_volume')
              }}\n{% endif %}\n"
          target:
            entity_id: media_player.kallen_bedroom_google_speaker
          alias: Reset volume
  mode: parallel
  max: 10
- id: '1671584633378'
  alias: Delivery Mode Cleanup
  description: ''
  trigger:
  - platform: time
    at: 00:00:00
    alias: At midnight
  condition:
  - condition: state
    entity_id: input_boolean.delivery_mode
    state: 'on'
    alias: If Delivery Mode is on
    for:
      hours: 1
      minutes: 0
      seconds: 0
  action:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.delivery_mode
    alias: Turn off Delivery Mode
  mode: single
- id: '1671946146837'
  alias: Christmas Day Show
  description: For that one special day a year, to make it just a little more magical
  trigger:
  - platform: state
    entity_id:
    - input_boolean.christmas_day_show
    from: 'off'
    to: 'on'
    alias: Start Show
    id: start-show
  - platform: state
    entity_id:
    - input_boolean.christmas_day_show
    from: 'on'
    to: 'off'
    alias: Stop Show
    id: stop-show
  condition: []
  action:
  - if:
    - condition: trigger
      id: start-show
    then:
    - service: switch.turn_off
      data: {}
      target:
        entity_id:
        - switch.adaptive_lighting_living_room
        - switch.adaptive_lighting_tina_lamp
      alias: Turn off adaptive lighting
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.animated_scene_christmas_day
      alias: Turn on Christmas Day scene
    - service: script.speech_engine
      data:
        who: living_room
        message: Merry Christmas everyone. And now, let us enjoy some awesome Christmas
          music!
      alias: TTS Announcement
    - delay:
        hours: 0
        minutes: 0
        seconds: 5
        milliseconds: 0
      alias: Give TTS time to finish
    - service: media_player.select_source
      data:
        source: Living Room TV
      target:
        entity_id: media_player.spotify_iron_nerd
      alias: Set source to Living Room TV
    - delay:
        hours: 0
        minutes: 0
        seconds: 2
        milliseconds: 0
      alias: Make sure that took effect
    - service: media_player.play_media
      data:
        media_content_id: https://open.spotify.com/track/7LPOnS3OvbF6DGrt9fQ7x9?si=3c7e28d623324a80
        media_content_type: music
      target:
        entity_id: media_player.spotify_iron_nerd
      alias: Play my Christmas Music playlist
    - service: media_player.media_play
      data: {}
      target:
        entity_id: media_player.spotify_iron_nerd
      alias: Actually play the music
    alias: If starting show
  - if:
    - condition: trigger
      id: stop-show
    then:
    - service: media_player.media_pause
      data: {}
      target:
        entity_id: media_player.spotify_iron_nerd
      alias: Stop the music
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.animated_scene_christmas_day
      alias: Turn off Christmas Day scene
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.animated_scene_christmas
      alias: Turn on Front Porch Christmas scene
    - service: input_select.select_option
      data:
        option: Adaptive
      target:
        entity_id: input_select.living_room_scenes
      alias: Set living room back to adaptive
    - service: input_select.select_option
      data:
        option: Reset
      target:
        entity_id: input_select.tina_desk_scenes
      alias: Reset Tina desk scene
    - service: script.speech_engine
      data:
        who: living_room
        message: Thats all folks, enjoy the rest of your Christmas Day! Eat lots of
          food and have lots of fun! And hey, maybe you could bring me some cake?
          I love cake!
      alias: TTS Announcement
    alias: If stopping show
  mode: restart
- id: '1678225060371'
  alias: Tornado Watch Handling
  description: Controls the input boolean for tornado watches, for use in briefings
    or automations
  trigger:
  - platform: numeric_state
    entity_id: sensor.weatheralerts_active_alerts
    attribute: tornado_watch_count
    above: 0
    id: watch_issued
    alias: Watch Issued
  - platform: numeric_state
    entity_id: sensor.weatheralerts_active_alerts
    attribute: tornado_watch_count
    below: 1
    id: watch_cleared
    alias: Watch Cleared
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: watch_issued
      sequence:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.tornado_watch
    - conditions:
      - condition: trigger
        id: watch_cleared
      sequence:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.tornado_watch
    alias: Control input boolean
  mode: restart
- id: '1679104710155'
  alias: Living Room Switch Handler
  description: ''
  use_blueprint:
    path: codycodes/hue-remote-dimmer-december-2021.yaml
    input:
      dimmer_device: ccc672e3d924e72a952d801736ea59d3
      on_short_action:
      - service: light.toggle
        data: {}
        target:
          entity_id: light.living_room_lights
      on_long_action:
      - service: input_select.select_option
        data:
          option: Adaptive
        target:
          entity_id: input_select.living_room_scenes
      brightness_up_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_living_room
        alias: Adaptive Off
      - service: light.turn_on
        data:
          brightness_step_pct: 12
        target:
          entity_id: light.living_room_lights
        alias: Brightness Up Small
      brightness_down_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_living_room
        alias: Adaptive Off
      - service: light.turn_on
        data:
          brightness_step_pct: 22
        target:
          entity_id: light.living_room_lights
        alias: Brightness Down Small
      off_short_action:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.early_night_mode
            state: 'on'
          sequence:
          - service: script.evening_on_first_floor
            data: {}
        - conditions:
          - condition: state
            entity_id: input_boolean.goodnight
            state: 'on'
          sequence:
          - service: script.goodnight_on_first_floor
            data: {}
        default:
        - service: light.turn_off
          data: {}
          target:
            entity_id:
            - light.living_room_lights
            - light.dining_room_lamp
            - light.tina_desk_lights
            - light.mud_room_overhead
      brightness_up_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_living_room
        alias: Adaptive Off
      - service: light.turn_on
        data:
          brightness_step_pct: -12
        target:
          entity_id: light.living_room_lights
        alias: Brightness Up Large
      brightness_down_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_living_room
        alias: Adaptive Off
      - service: light.turn_on
        data:
          brightness_step_pct: -22
        target:
          entity_id: light.living_room_lights
        alias: Brightness Down Large
      off_long_action:
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.dining_room_lamp
      - service: input_select.select_option
        data:
          option: Reset
        target:
          entity_id: input_select.tina_desk_scenes
      - service: input_select.select_option
        data:
          option: Adaptive
        target:
          entity_id: input_select.dining_room_lamp_scenes
      - service: input_select.select_option
        data:
          option: Adaptive
        target:
          entity_id: input_select.living_room_scenes
- id: '1682550106529'
  alias: Master Bedroom Switch Handler
  description: ''
  use_blueprint:
    path: codycodes/hue-remote-dimmer-december-2021.yaml
    input:
      dimmer_device: 47cce1f5af5137fcb398dec76adbd23e
      on_long_action:
      - service: input_select.select_option
        data:
          option: Adaptive
        target:
          entity_id: input_select.master_bedroom_scenes
      brightness_up_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_master_bedroom
      brightness_up_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_master_bedroom
      brightness_down_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_master_bedroom
      brightness_down_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_master_bedroom
      off_long_action:
      - service: input_select.select_option
        data:
          option: Side Nightlight
        target:
          entity_id: input_select.master_bedroom_scenes
- id: '1682550357188'
  alias: Emma Bedroom Switch Handler
  description: ''
  use_blueprint:
    path: codycodes/hue-remote-dimmer-december-2021.yaml
    input:
      dimmer_device: 18dc2f03d3a1c0c5e8c93e365e94de21
      on_long_action:
      - service: input_select.select_option
        data:
          option: Adaptive
        target:
          entity_id: input_select.emma_bedroom_scenes
      brightness_up_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_emma_bedroom
      brightness_up_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_emma_bedroom
      brightness_down_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_emma_bedroom
      brightness_down_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_emma_bedroom
      off_long_action:
      - service: input_boolean.toggle
        data: {}
        target:
          entity_id: input_boolean.emma_sleeping
      off_short_action:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.early_night_mode
            state: 'on'
          sequence:
          - service: script.evening_on_second_floor
            data: {}
        - conditions:
          - condition: state
            entity_id: input_boolean.goodnight
            state: 'on'
          sequence:
          - service: script.goodnight_on_second_floor
            data: {}
        default:
        - service: light.turn_off
          data: {}
          target:
            area_id:
            - emma_bedroom
            - kallen_bedroom
            - master_bedroom
            - master_bedroom_closet
            - upstairs_hallway
        - if:
          - condition: template
            value_template: '{{ is_state(''timer.upstairs_bathroom_motion_timer'',''idle'')
              and is_state(''binary_sensor.upstairs_bathroom_motion'',''off'') and
              is_state(''light.upstairs_bathroom_lights'',''on'') and is_state(''input_boolean.shower_mode'',''off'')
              }}'
          then:
          - service: light.turn_off
            data: {}
            target:
              entity_id: light.upstairs_bathroom_lights
- id: '1682561310614'
  alias: Kallen Bedroom Switch Handler
  description: ''
  use_blueprint:
    path: codycodes/hue-remote-dimmer-december-2021.yaml
    input:
      dimmer_device: ca3ff98b83eff1b55a79955ba02df333
      on_long_action:
      - service: input_select.select_option
        data:
          option: Adaptive
        target:
          entity_id: input_select.kallen_bedroom_scenes
      brightness_up_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_kallen_bedroom
      brightness_up_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_kallen_bedroom
      brightness_down_short_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_kallen_bedroom
      brightness_down_long_action:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.adaptive_lighting_kallen_bedroom
      off_long_action:
      - service: input_boolean.toggle
        data: {}
        target:
          entity_id: input_boolean.kallen_sleeping
      off_short_action:
      - choose:
        - conditions:
          - condition: state
            entity_id: light.kallen_bedroom_overhead
            state: 'off'
          sequence:
          - service: input_select.select_option
            data:
              option: Overhead Nightlight
            target:
              entity_id: input_select.kallen_bedroom_scenes
        - conditions:
          - condition: state
            entity_id: light.kallen_bedroom_overhead
            state: 'on'
          sequence:
          - service: light.turn_off
            data: {}
            target:
              entity_id: light.kallen_bedroom_overhead
          - delay:
              hours: 0
              minutes: 0
              seconds: 2
              milliseconds: 0
          - service: input_text.set_value
            data:
              value: Adaptive
            target:
              entity_id: input_text.kallen_bedroom_selected_scene
          - service: switch.turn_off
            data: {}
            target:
              entity_id: switch.adaptive_lighting_sleep_mode_kallen_bedroom
          - service: switch.turn_on
            data: {}
            target:
              entity_id: switch.adaptive_lighting_kallen_bedroom
- id: '1682793072646'
  alias: Tina Desk Switch Handler
  description: ''
  use_blueprint:
    path: codycodes/hue-remote-dimmer-december-2021.yaml
    input:
      dimmer_device: 40c14ccfe958d21d75888a968bbbf908
      on_short_action:
      - service: light.toggle
        data: {}
        target:
          entity_id: light.dining_room_lamp
      on_long_action:
      - service: input_select.select_option
        data:
          option: Adaptive
        target:
          entity_id: input_select.dining_room_lamp_scenes
      off_short_action:
      - service: input_boolean.toggle
        data: {}
        target:
          entity_id: input_boolean.tina_desk_lights
      off_long_action:
      - service: input_select.select_option
        data:
          option: Reset
        target:
          entity_id: input_select.tina_desk_scenes
- id: '1693174941627'
  alias: Presence Disconnect Protection
  description: When the internet drops, sometimes LIfe360 does too. This automation
    prevents the chaos that causes.
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.internet
    from: 'on'
    to: 'off'
    id: disconnect
  - platform: state
    entity_id:
    - binary_sensor.internet
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 1
      seconds: 0
    id: reconnect
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - disconnect
      sequence:
      - service: automation.turn_off
        data:
          stop_actions: true
        target:
          entity_id:
          - automation.family_has_arrived
          - automation.family_has_left
    - conditions:
      - condition: trigger
        id:
        - reconnect
      sequence:
      - service: automation.turn_on
        data: {}
        target:
          entity_id:
          - automation.family_has_arrived
          - automation.family_has_left
  mode: restart
- id: '1696284855902'
  alias: Hot Day Activate
  description: If excessive heat is forecast after the scheduler has already run,
    turn on the hot day boolean
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.heat_warning
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.hot_day
  mode: restart
- id: '1696285290316'
  alias: Scheduled Alarm Disarm
  description: ''
  trigger:
  - platform: time
    at: input_datetime.morning_alarm_disarm
    id: morning
  - platform: time
    at: input_datetime.master_bedroom_wakeup
    id: wakeup
  condition:
  - condition: state
    entity_id: binary_sensor.parents_home
    state: 'on'
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: template
    value_template: '{{ states(''alarm_control_panel.stratton_ave_alarm'') not in
      [''disarmed'',''unavailable'',''unknown''] }}'
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.skip_disarm
        state: 'on'
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.skip_disarm
        data: {}
      - service: persistent_notification.create
        data:
          title: Security Information
          message: Scheduled security disarm has been skipped
          notification_id: security_disarm_skipped
    - conditions:
      - condition: trigger
        id: morning
      sequence:
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.work_today
          state: 'on'
        - condition: state
          entity_id: input_boolean.kallen_school_today
          state: 'on'
      - service: alarm_control_panel.alarm_disarm
        target:
          entity_id: alarm_control_panel.nerdhome_alarm_panel
        data: {}
    - conditions:
      - condition: trigger
        id: wakeup
      sequence:
      - service: alarm_control_panel.alarm_disarm
        target:
          entity_id: alarm_control_panel.nerdhome_alarm_panel
        data: {}
  mode: single
- id: '1696285375998'
  alias: Scheduled Alarm Rearm
  description: ''
  trigger:
  - platform: time
    at: input_datetime.morning_alarm_rearm
  condition:
  - condition: state
    entity_id: binary_sensor.parents_home
    state: 'on'
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  - condition: or
    conditions:
    - condition: state
      entity_id: input_boolean.work_today
      state: 'on'
    - condition: state
      entity_id: input_boolean.kallen_school_today
      state: 'on'
  - condition: template
    value_template: '{% set rearm = state_attr(''input_datetime.morning_alarm_rearm'',''timestamp'')
      %}

      {% set wake = state_attr(''input_datetime.master_bedroom_wakeup'',''timestamp'')
      %}

      {% set diff = wake - rearm %}

      {{ diff > 1800 }}

      '
  action:
  - if:
    - condition: state
      entity_id: input_boolean.work_today
      state: 'on'
    then:
    - service: script.security_scheduling
      data: {}
  - if:
    - condition: state
      entity_id: input_boolean.skip_rearm
      state: 'on'
    then:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.skip_rearm
      data: {}
    - service: persistent_notification.create
      data:
        title: Security Information
        message: Scheduled security rearm has been skipped
        notification_id: security_rearm_skipped
    - stop: Skipped
  - if:
    - condition: and
      conditions:
      - condition: time
        before: '14:00:00'
        after: '12:00:00'
        weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
      - condition: state
        entity_id: input_boolean.kallen_school_early_release
        state: 'on'
    then:
    - stop: School early release
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: alarm_control_panel.stratton_ave_alarm
        state: disarmed
      - condition: time
        after: 04:15:00
        before: '13:30:00'
    then:
    - service: alarm_control_panel.alarm_arm_home
      target:
        entity_id: alarm_control_panel.nerdhome_alarm_panel
      data: {}
  mode: single
- id: '1696285629788'
  alias: Lockdown Issue
  description: ''
  trigger:
  - platform: state
    entity_id: input_boolean.lockdown_issue
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: persistent_notification.create
    data:
      title: Lockdown Issue
      notification_id: lockdown_issue
      message: 'I fucked up this notification, will fix later, but you still gotta
        issue, okbyeeeee {% set extdoors = expand(''binary_sensor.exterior_doors'')
        | selectattr(''state'',''eq'',''on'') | map(attribute=''name'') | list | join('',
        '') %} {% set windows = expand(''binary_sensor.windows'') | selectattr(''state'',''eq'',''on'')
        | map(attribute=''name'') | list | join('', '') %} A lockdown issue has been
        caused by the following sensors:

        Doors:{% if is_state(''binary_sensor.exterior_doors'',''on'') %} {{ extdoors
        }} {% else %} None {% endif %} Windows:{% if is_state(''binary_sensor.windows'',''on'')
        %} {{ windows }} {% else %} None {% endif %}'
  - service: script.text_notify
    data:
      type: critical
      who: "{% if states('person.christina_stork') in ['Bob Evans','BobEvans','unavailable','unknown']
        %}\n  tony\n{% else %}\n  parents\n{% endif %}"
      title: Security Not Armed!
      tag: lockdown-issue
      message: 'I fucked up this notification, will fix later, but you still gotta
        issue, okbyeeeee {% set extdoors = expand(''binary_sensor.exterior_doors'')
        | selectattr(''state'',''eq'',''on'') | map(attribute=''name'') | list | join('',
        '') %} {% set windows = expand(''binary_sensor.windows'') | selectattr(''state'',''eq'',''on'')
        | map(attribute=''name'') | list | join('', '') %} A lockdown issue has been
        caused by the following sensors:

        Doors:{% if is_state(''binary_sensor.exterior_doors'',''on'') %} {{ extdoors
        }} {% else %} None {% endif %} Windows:{% if is_state(''binary_sensor.windows'',''on'')
        %} {{ windows }} {% else %} None {% endif %}'
  - if:
    - condition: state
      entity_id: binary_sensor.basement_occupied
      state: 'on'
    then:
    - service: scene.create
      data:
        scene_id: light_state_before_lockdown_issue
        snapshot_entities:
        - light.living_room_color_1
        - light.living_room_color_2
        - light.living_room_color_3
        - light.tina_lamp_side
        - light.tina_lamp_top
        - light.tina_desk_strip
        - light.stairwell_led_strip
        - light.basement_stairwell
        - light.basement_tall_lamp
        - light.basement_short_lamp
        - light.basement_led_strip_1
    else:
    - service: scene.create
      data:
        scene_id: light_state_before_lockdown_issue
        snapshot_entities:
        - light.living_room_color_1
        - light.living_room_color_2
        - light.living_room_color_3
        - light.tina_lamp_side
        - light.tina_lamp_top
        - light.tina_desk_strip
        - light.stairwell_led_strip
  - delay:
      seconds: 1
  - service: switch.turn_off
    target:
      entity_id:
      - switch.adaptive_lighting_living_room
      - switch.adaptive_lighting_tina_lamp
      - switch.adaptive_lighting_basement_studio
    data: {}
  - if:
    - condition: state
      entity_id: binary_sensor.basement_occupied
      state: 'on'
    then:
    - service: light.turn_on
      target:
        entity_id:
        - light.living_room_lights
        - light.tina_lamp
        - light.tina_desk_strip
        - light.stairwell_led_strip
        - light.basement_studio_lights
      data:
        color_name: red
        brightness_pct: 100
    else:
    - service: light.turn_on
      target:
        entity_id:
        - light.living_room_lights
        - light.tina_lamp
        - light.tina_desk_strip
        - light.stairwell_led_strip
      data:
        color_name: red
        brightness_pct: 100
  - service: script.status_annc
    data:
      who: common
      call_interruption: 1
      call_lockdown_issue: 1
  - wait_template: '{{ is_state(''binary_sensor.security_faults'',''off'') or is_state(''input_boolean.lockdown_issue'',''off'')
      }}'
    timeout:
      minutes: 10
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.lockdown_issue
    data: {}
  - delay:
      seconds: 3
  - if:
    - condition: state
      entity_id: binary_sensor.security_faults
      state: 'off'
    then:
    - service: script.text_notify
      data:
        type: alert
        who: all
        message: clear_notification
        tag: lockdown-issue
    - service: persistent_notification.dismiss
      data:
        notification_id: lockdown_issue
    - if:
      - condition: state
        entity_id: binary_sensor.parents_home
        state: 'off'
      then:
      - service: alarm_control_panel.alarm_arm_away
        target:
          entity_id: alarm_control_panel.nerdhome_alarm_panel
        data: {}
      else:
      - service: alarm_control_panel.alarm_arm_home
        target:
          entity_id: alarm_control_panel.nerdhome_alarm_panel
        data: {}
    else:
    - service: script.speech_engine
      data:
        who: common
        message: I am unable to resolve the security issue, so I am giving up. Please
          report the issue to Tony if applicable.
  - service: scene.turn_on
    target:
      entity_id: scene.light_state_before_lockdown_issue
    data: {}
  - delay:
      seconds: 3
  - service: switch.turn_on
    target:
      entity_id:
      - switch.adaptive_lighting_living_room
      - switch.adaptive_lighting_tina_lamp
      - switch.adaptive_lighting_basement_studio
    data: {}
  mode: single
- id: '1696285738109'
  alias: Alexa Guard Handling
  description: Sync state of Alexa guard with state of main alarm system
  trigger:
  - platform: state
    entity_id: alarm_control_panel.stratton_ave_alarm
    to: armed_away
    id: away
  - platform: state
    entity_id: alarm_control_panel.stratton_ave_alarm
    to: disarmed
    id: disarmed
  condition:
  - condition: state
    entity_id: input_boolean.lockdown_issue
    state: 'off'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: away
      sequence:
      - service: alarm_control_panel.alarm_arm_away
        target:
          entity_id: alarm_control_panel.alexa_guard_9ee3b
        data: {}
    - conditions:
      - condition: trigger
        id: disarmed
      sequence:
      - service: alarm_control_panel.alarm_disarm
        target:
          entity_id: alarm_control_panel.alexa_guard_9ee3b
        data: {}
  mode: restart
- id: '1696286103061'
  alias: Living Room Night Lighting
  description: Provide lighting in case anyone needs to go downstairs in the middle
    of the night.
  trigger:
  - platform: state
    entity_id: binary_sensor.living_room_motion
    from: 'off'
    to: 'on'
    id: motion-on
  - platform: state
    entity_id: binary_sensor.living_room_motion
    from: 'on'
    to: 'off'
    id: motion-off
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.living_room_motion_timer
    id: timer-finished
  condition:
  - condition: state
    entity_id: binary_sensor.people_present
    state: 'on'
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ (trigger.id == ''motion-on'' and is_state(''input_boolean.night_mode'',''on''))
          and (is_state(''input_boolean.kallen_sleeping'',''on'') or is_state(''input_boolean.kallen_overnight'',''on''))
          }}'
        alias: Motion On
      sequence:
      - service: timer.cancel
        target:
          entity_id: timer.living_room_motion_timer
        data: {}
      - service: light.turn_on
        target:
          entity_id: light.first_floor_lights
        data: {}
      - service: script.stairwell_led_strip
        data:
          color_temp_kelvin: 2000
          brightness: 255
      - service: input_select.select_option
        target:
          entity_id:
          - input_select.living_room_scenes
          - input_select.tina_lamp_scenes
          - input_select.mud_room_scenes
          - input_select.downstairs_bathroom_scenes
          - input_select.dining_room_lamp_scenes
        data:
          option: Adaptive
    - conditions:
      - condition: template
        value_template: '{{ (trigger.id == ''motion-off'' and is_state(''input_boolean.night_mode'',''on''))
          and (is_state(''input_boolean.kallen_sleeping'',''on'') or is_state(''input_boolean.kallen_overnight'',''on''))
          }}'
        alias: Motion Off
      sequence:
      - service: timer.start
        target:
          entity_id: timer.living_room_motion_timer
        data:
          duration: '{% from ''time.jinja'' import timer_duration %} {{ timer_duration(''input_number.living_room_lights_off_delay'')
            }}

            '
    - conditions:
      - condition: trigger
        id: timer-finished
        alias: Timer Finished
      sequence:
      - service: light.turn_off
        target:
          entity_id:
          - light.living_room_lights
          - light.tina_desk_lights
          - light.mud_room_overhead
          - light.downstairs_bathroom_lights
          - light.dining_room_lamp
        data: {}
      - service: script.stairwell_led_strip
        data:
          color_temp_kelvin: 2000
          brightness: '{{ 50 if is_state(''binary_sensor.early_night_mode'',''on'')
            else 255 }}'
      - delay:
          seconds: 5
      - if:
        - condition: state
          entity_id: binary_sensor.early_night_mode
          state: 'off'
        then:
        - service: light.turn_off
          target:
            entity_id: light.stairwell_led_strip
          data: {}
  mode: restart
- id: '1696286192013'
  alias: Tina Desk Lights Handler
  description: Handles turning on the desk lights with smart scene selection and also
    turning them off
  trigger:
  - platform: state
    entity_id: input_boolean.tina_desk_lights
    from: 'off'
    to: 'on'
    id: toggle-on
  - platform: state
    entity_id: input_boolean.tina_desk_lights
    from: 'on'
    to: 'off'
    id: toggle-off
  - platform: state
    entity_id: input_select.tina_desk_scenes
    to: Reset
    id: reset
  - platform: state
    entity_id: light.tina_desk_lights
    from: 'on'
    to: 'off'
    id: lights-off
  - platform: state
    entity_id: light.tina_desk_lights
    from: 'off'
    to: 'on'
    id: lights-on
  - platform: state
    entity_id: binary_sensor.tina_desktop_on
    from: 'off'
    to: 'on'
    id: computer-on
  condition: []
  action:
  - if:
    - condition: or
      conditions:
      - condition: trigger
        id: toggle-on
      - condition: trigger
        id: reset
      - condition: trigger
        id: computer-on
    then:
    - service: input_select.select_option
      target:
        entity_id: input_select.tina_desk_scenes
      data:
        option: '{{ states(''sensor.tina_desk_scene'') }}'
  - if:
    - condition: trigger
      id: toggle-off
    then:
    - service: light.turn_off
      target:
        entity_id: light.tina_desk_lights
      data: {}
  - if:
    - condition: trigger
      id: lights-off
    then:
    - if:
      - condition: state
        entity_id: input_boolean.tina_desk_lights
        state: 'on'
      then:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.tina_desk_lights
        data: {}
  - if:
    - condition: trigger
      id: lights-on
    then:
    - if:
      - condition: state
        entity_id: input_boolean.tina_desk_lights
        state: 'off'
      then:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.tina_desk_lights
        data: {}
      - delay:
          seconds: 2
        alias: Prevent script from re-triggering when boolean is turned on
  mode: single
- id: '1696286403914'
  alias: Basement Lights Handling
  description: Handles the presence-related automation of lights in the basement
  trigger:
  - platform: state
    entity_id: binary_sensor.basement_studio_door
    from: 'off'
    to: 'on'
    id: door-open
  - platform: state
    entity_id: binary_sensor.basement_studio_door
    from: 'on'
    to: 'off'
    id: door-closed
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.basement_studio_door_timer
    id: timer-finished
  - platform: state
    entity_id: binary_sensor.basement_occupied
    from: 'off'
    to: 'on'
    id: basement-occupied
  - platform: state
    entity_id: binary_sensor.basement_occupied
    from: 'on'
    to: 'off'
    id: basement-unoccupied
  - platform: state
    entity_id:
    - input_boolean.studio_quiet
    - input_boolean.recliner_mode
    from: 'off'
    to: 'on'
    id: studio-quiet
  - platform: state
    entity_id: sensor.twitch_ironnerd24
    from: offline
    to: streaming
    id: stream-started
  condition:
  - condition: state
    entity_id: input_boolean.studio_quiet
    state: 'off'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: door-open
      sequence:
      - if:
        - condition: state
          entity_id: light.basement_studio_lights
          state: 'off'
        then:
        - service: light.turn_on
          target:
            entity_id: light.basement_studio_lights
          data: {}
      - service: timer.cancel
        target:
          entity_id: timer.basement_studio_door_timer
        data: {}
    - conditions:
      - condition: trigger
        id: door-closed
      sequence:
      - if:
        - condition: state
          entity_id: binary_sensor.basement_occupied
          state: 'off'
        then:
        - service: timer.start
          target:
            entity_id: timer.basement_studio_door_timer
          data:
            duration: '{% from ''time.jinja'' import timer_duration %} {{ timer_duration(''input_number.basement_studio_lights_off_delay'')
              }}

              '
    - conditions:
      - condition: trigger
        id:
        - basement-occupied
        - studio-quiet
        - stream-started
      sequence:
      - service: timer.cancel
        target:
          entity_id: timer.basement_studio_door_timer
        data: {}
    - conditions:
      - condition: trigger
        id: basement-unoccupied
      sequence:
      - if:
        - condition: state
          entity_id: light.basement_studio_lights
          state: 'on'
        then:
        - if:
          - condition: state
            entity_id: timer.basement_studio_door_timer
            state: idle
          then:
          - service: timer.start
            target:
              entity_id: timer.basement_studio_door_timer
            data:
              duration: '{% from ''time.jinja'' import timer_duration %} {{ timer_duration(''input_number.basement_studio_lights_off_delay'')
                }}

                '
    - conditions:
      - condition: trigger
        id: timer-finished
      sequence:
      - service: light.turn_off
        target:
          entity_id: light.basement_studio_lights
        data: {}
  mode: restart
- id: '1696286481890'
  alias: Recliner Mode
  description: For naptime in the basement
  trigger:
  - platform: state
    entity_id: input_boolean.recliner_mode
    from: 'off'
    to: 'on'
    id: recliner-on
  - platform: state
    entity_id: input_boolean.recliner_mode
    from: 'on'
    to: 'off'
    id: recliner-off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: recliner-on
      sequence:
      - service: input_select.select_option
        target:
          entity_id: input_select.basement_studio_scenes
        data:
          option: Stairwell
      - service: input_boolean.turn_on
        target:
          entity_id:
          - input_boolean.white_noise_basement
          - input_boolean.studio_quiet
        data: {}
      - if:
        - condition: template
          value_template: "{% if is_state('media_player.basement_tv','playing') %}\n
            \ false\n{% elif is_state('media_player.basement_tv','paused') or is_state('media_player.basement_tv','idle')
            %}\n  {{ state_attr('media_player.basement_tv','app_name') in ['TV','Android
            TV Launcher'] }}\n{% else %}\n  false\n{% endif %}\n"
        then:
        - service: media_player.turn_off
          target:
            entity_id: media_player.basement_tv
          data: {}
      - if:
        - condition: not
          conditions:
          - condition: state
            entity_id: media_player.tony_asus
            state: playing
        then:
        - service: script.turn_on
          target:
            entity_id: script.tony_desktop_displays_off
          data: {}
    - conditions:
      - condition: trigger
        id: recliner-off
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.basement_studio_lights
        alias: Turn off the remaining lights
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 500
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.adaptive_lighting_basement_studio
        alias: Turn on Adaptive Lighting to read the current values
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 500
      - variables:
          brightness: '{{ state_attr(''switch.adaptive_lighting_basement_studio'',''brightness_pct'')
            | int }}'
        alias: Set intended brightness
      - service: input_boolean.turn_off
        target:
          entity_id:
          - input_boolean.studio_quiet
        data: {}
        alias: Turn off the quiet switch
      - service: light.turn_on
        data:
          brightness_pct: '{{ brightness|default(70) }}'
          transition: "{% from 'time.jinja' import timer_duration %} {% if is_state('binary_sensor.early_night_mode','on')
            %}\n  {{ timer_duration('input_number.wakeup_lights_fade_night') }}\n{%
            else %}\n  {{ timer_duration('input_number.wakeup_lights_fade_day') }}\n{%
            endif %}\n"
        target:
          entity_id: light.basement_studio_lights
        alias: Fade the lights in gradually
      - alias: Wait for lights to fade in unless interrupted
        wait_for_trigger:
        - platform: state
          entity_id:
          - light.basement_studio_lights
          to: 'off'
          id: lights-off
        - platform: state
          entity_id:
          - input_select.basement_studio_scenes
          to: Adaptive
          id: adaptive
        - platform: state
          entity_id:
          - binary_sensor.tony_desktop_idle
          from: 'on'
          to: 'off'
          id: computer
        timeout:
          minutes: "{% if is_state('binary_sensor.early_night_mode','on') %}\n  {{
            states('input_number.wakeup_lights_fade_night') }}\n{% else %}\n  {{ states('input_number.wakeup_lights_fade_day')
            }}\n{% endif %}\n"
        continue_on_timeout: true
      - alias: Take action after timeout or interruption
        choose:
        - conditions:
          - alias: Adaptive
            condition: template
            value_template: '{{ wait.trigger.id == ''adaptive'' }}'
          sequence:
          - service: adaptive_lighting.set_manual_control
            data:
              manual_control: false
              entity_id: switch.adaptive_lighting_basement_studio
            alias: Reset manual control
        - conditions:
          - alias: Nothing
            condition: template
            value_template: '{{ wait.trigger == ''none'' or wait.trigger.idx is undefined
              }}'
          sequence:
          - service: input_select.select_option
            data:
              option: Adaptive
            target:
              entity_id: input_select.basement_studio_scenes
            alias: Set scene back to adaptive
          - service: adaptive_lighting.set_manual_control
            data:
              manual_control: false
              entity_id: switch.adaptive_lighting_basement_studio
            alias: Reset manual control
        - conditions:
          - condition: template
            value_template: '{{ wait.trigger.id == ''lights-off'' }}'
            alias: Lights off
          sequence:
          - service: input_text.set_value
            data:
              value: Adaptive
            target:
              entity_id: input_text.basement_studio_selected_scene
            alias: Reset selected scene input text
          - service: adaptive_lighting.set_manual_control
            data:
              manual_control: false
              entity_id: switch.adaptive_lighting_basement_studio
            alias: Reset manual control
      - service: input_boolean.turn_off
        target:
          entity_id:
          - input_boolean.white_noise_basement
        data: {}
        alias: Turn off white noise
      - alias: If my computer is on, turn the screens back on
        if:
        - condition: template
          value_template: '{{ is_state(''binary_sensor.tony_desktop_on'',''on'') or
            states(''sensor.tony_asus_current_username'') not in [''unavailable'',''unknown'']
            }}'
        then:
        - alias: Turn the screens back on
          service: script.turn_on
          target:
            entity_id:
            - script.tony_desktop_displays_on
          data: {}
      - service: media_player.turn_on
        target:
          entity_id: media_player.basement_tv
        data: {}
  mode: restart
- id: '1696286540644'
  alias: Basement Lights Adaptive Resync
  description: Deals with situations where the basement lights should be adaptive
    but end up out of sync
  trigger:
  - platform: state
    entity_id: binary_sensor.basement_lights_sync_issue
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.studio_quiet
    state: 'off'
  - condition: template
    value_template: '{{ is_state_attr(''light.basement_studio_lights'',''color_mode'',''color_temp'')
      }}'
  action:
  - service: adaptive_lighting.apply
    data:
      entity_id: switch.adaptive_lighting_basement_studio
      adapt_brightness: '{{ is_state(''switch.adaptive_lighting_adapt_brightness_basement_studio'',''on'')
        }}'
      adapt_color: '{{ is_state(''switch.adaptive_lighting_adapt_color_basement_studio'',''on'')
        }}'
  mode: restart
- id: '1696286644401'
  alias: Basement LED Strip Reset
  description: Power cycle the LED strip when it goes unavailable
  trigger:
  - platform: state
    entity_id: light.basement_led_strip_1
    to: unavailable
    for:
      minutes: 5
    id: offline
  - platform: state
    entity_id: input_button.basement_led_strip_reset
    not_to:
    - unavailable
    - unknown
    id: button
  - platform: time
    at: 00:00:00
    id: midnight
  condition: []
  action:
  - choose:
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id:
          - offline
          - button
      sequence:
      - if:
        - condition: template
          value_template: '{{ is_state(''input_boolean.studio_quiet'',''off'') and
            is_state(''sensor.twitch_ironnerd24'',''offline'') and states(''switch.basement_led_strip'')
            not in [''unknown'',''unavailable''] }}'
        then:
        - repeat:
            while:
            - condition: state
              entity_id: light.basement_led_strip_1
              state: unavailable
            - condition: template
              value_template: '{{ repeat.index <= 10 }}'
            sequence:
            - service: input_number.increment
              target:
                entity_id: input_number.basement_led_strip_resets
              data: {}
            - service: switch.turn_off
              target:
                entity_id: switch.basement_led_strip
              data: {}
            - delay:
                seconds: 20
            - service: switch.turn_on
              target:
                entity_id: switch.basement_led_strip
              data: {}
            - delay:
                seconds: 30
    - conditions:
      - condition: trigger
        id: midnight
      sequence:
      - service: input_number.set_value
        target:
          entity_id: input_number.basement_led_strip_resets
        data:
          value: 0
  mode: single
- id: '1696286732266'
  alias: Living Room Lights Adaptive Resync
  description: Deals with situations where the living room lights should be adaptive
    but end up out of sync
  trigger:
  - platform: state
    entity_id: binary_sensor.living_room_sync_issue
    from: 'off'
    to: 'on'
  condition:
  - condition: template
    value_template: '{{ is_state_attr(''light.living_room_lights'',''color_mode'',''color_temp'')
      }}'
  action:
  - service: adaptive_lighting.apply
    data:
      entity_id: switch.adaptive_lighting_living_room
      adapt_brightness: '{{ is_state(''switch.adaptive_lighting_adapt_brightness_living_room'',''on'')
        }}'
      adapt_color: '{{ is_state(''switch.adaptive_lighting_adapt_color_living_room'',''on'')
        }}'
  mode: restart
- id: '1696286814384'
  alias: Vacation Lighting
  description: Turns on lights for helpers who come over (such as to take care of
    the cats) while we are gone
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
    id: door
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.vacation_helper
    id: timer-finished
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: door
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.audible_notifications
        data: {}
      - service: light.turn_on
        target:
          entity_id:
          - light.basement_studio_lights
          - light.first_floor_lights
          - light.second_floor_lights
        data: {}
      - service: switch.turn_off
        target:
          entity_id: switch.presence_simulation
        data: {}
      - delay:
          seconds: 3
      - service: input_select.select_option
        target:
          entity_id:
          - input_select.basement_studio_scenes
          - input_select.living_room_scenes
          - input_select.downstairs_bathroom_scenes
          - input_select.dining_room_lamp_scenes
          - input_select.mud_room_scenes
          - input_select.upstairs_hallway_scenes
          - input_select.upstairs_bathroom_scenes
          - input_select.master_bedroom_scenes
          - input_select.kallen_bedroom_scenes
          - input_select.emma_bedroom_scenes
        data:
          option: Adaptive
      - service: input_select.select_option
        target:
          entity_id: input_select.tina_desk_scenes
        data:
          option: Evening Mode
      - service: timer.start
        target:
          entity_id: timer.vacation_helper
        data:
          duration: 01:00:00
      - service: script.speech_engine
        data:
          who: living_room
          message: Welcome, vacation helper. I have turned on every light in the house
            for you. They will remain on for one hour. Thank you for your help.
          type: alert
    - conditions:
      - condition: trigger
        id: timer-finished
      sequence:
      - service: light.turn_off
        target:
          entity_id:
          - light.basement_studio_lights
          - light.first_floor_lights
          - light.second_floor_lights
        data: {}
      - service: switch.turn_on
        target:
          entity_id: switch.presence_simulation
        data: {}
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.audible_notifications
        data: {}
  mode: restart
- id: '1696288503650'
  alias: Fix High Temperature
  description: Gotta make up for one of a few shortcomings in Pirateweather
  trigger:
  - platform: time_pattern
    minutes: /5
  condition:
  - condition: time
    before: '18:00:00'
  action:
  - service: input_number.set_value
    target:
      entity_id: input_number.today_corrected_high_temp
    data:
      value: '{{ states(''sensor.todays_high_temp'') | int }}'
    alias: Update corrected high temp for today
  - if:
    - condition: time
      after: 06:10:00
    then:
    - service: input_number.set_value
      data:
        value: '{{ states(''sensor.tomorrow_s_high_temp'') | int }}'
      target:
        entity_id: input_number.tomorrow_corrected_high_temp
    alias: If after 6:10am, also update high temp for tomorrow
  mode: single
- id: '1696288846954'
  alias: Tony Meds Handler
  description: Make sure Tony has taken his meds at the scheduled times
  trigger:
  - platform: time
    at: input_datetime.tony_morning_meds_notify
    id: morning-notify
    alias: Morning Notify
  - platform: time
    at: input_datetime.tony_afternoon_meds_notify
    id: afternoon-notify
    alias: Afternoon Notify
  - platform: time
    at: input_datetime.tony_night_meds_notify
    id: night-notify
    alias: Night Notify
  - platform: state
    entity_id:
    - input_boolean.tony_morning_meds_taken
    to: 'on'
    id: boolean-morning
    alias: Morning Taken
    from: 'off'
  - platform: state
    entity_id:
    - input_boolean.tony_afternoon_meds_taken
    id: boolean-afternoon
    from: 'off'
    to: 'on'
    alias: Afternoon Taken
  - platform: state
    entity_id:
    - input_boolean.tony_night_meds_taken
    id: boolean-night
    alias: Night Taken
    from: 'off'
    to: 'on'
  - platform: state
    entity_id:
    - input_boolean.master_bedroom_sleeping
    id: sleep-off
    alias: Sleep Off
    from: 'on'
    to: 'off'
  condition: []
  action:
  - alias: Routing
    choose:
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id: morning-notify
        - condition: state
          entity_id: input_boolean.tony_morning_meds_taken
          state: 'off'
        alias: Morning Notify
      sequence:
      - service: script.turn_on
        target:
          entity_id: script.tony_morning_meds
        data: {}
        alias: Run morning meds script
    - conditions:
      - alias: Afternoon Notify
        condition: and
        conditions:
        - condition: trigger
          id:
          - afternoon-notify
        - condition: state
          entity_id: input_boolean.tony_afternoon_meds_taken
          state: 'off'
      sequence:
      - service: script.tony_afternoon_meds
        data: {}
        alias: Run afternoon meds script
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id:
          - night-notify
        - condition: state
          entity_id: input_boolean.tony_night_meds_taken
          state: 'off'
        alias: Night Notify
      sequence:
      - service: script.turn_on
        target:
          entity_id: script.tony_night_meds
        data: {}
        alias: Run night meds script
    - conditions:
      - condition: trigger
        id: boolean-morning
        alias: Morning Taken
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.tony_morning_meds_taken
        data:
          datetime: '{% from ''time.jinja'' import set_datetime %} {{ set_datetime(0)
            }}

            '
        alias: Set time morning meds were taken
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.tony_afternoon_meds_notify
        data:
          datetime: '{% from ''time.jinja'' import set_datetime %} {% set interval
            = states(''input_number.tony_afternoon_meds_interval'') | int %} {{ set_datetime(interval)
            }}

            '
        alias: Adjust afternoon meds reminder
    - conditions:
      - condition: trigger
        id:
        - boolean-afternoon
        alias: Afternoon Taken
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.tony_afternoon_meds_taken
        data:
          datetime: '{% from ''time.jinja'' import set_datetime %} {{ set_datetime(0)
            }}

            '
        alias: Set time afternoon meds were taken
    - conditions:
      - condition: trigger
        id: boolean-night
        alias: Night Taken
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.tony_night_meds_taken
        data:
          datetime: '{% from ''time.jinja'' import set_datetime %} {{ set_datetime(0)
            }}

            '
        alias: Set time night meds were taken
    - conditions:
      - condition: trigger
        id: sleep-off
        alias: Sleep Off
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.tony_morning_meds_notify
        data:
          datetime: '{% from ''time.jinja'' import set_datetime %} {{ set_datetime(0,1)
            }}

            '
        alias: Set time to start notifying for morning meds
  mode: parallel
  max: 10
- id: '1696288939707'
  alias: Tony Stream Today
  description: ''
  trigger:
  - platform: time
    at: 08:00:00
  condition:
  - condition: template
    value_template: '{% from ''time.jinja'' import calendar_event_today %} {{ calendar_event_today(''calendar.tony_s_twitch_schedule'')
      }}

      '
  action:
  - service: script.tony_stream_today
    data: {}
  mode: single
  initial_state: true
- id: '1696293127764'
  alias: Timer Handling
  description: This automation will handle when house timers (usually set by voice)
    are finished
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.kitchen_timer
    id: kitchen-finished
  condition: []
  action:
  - choose:
    - conditions: '{{ trigger.id == ''kitchen-finished'' }}'
      sequence:
      - service: script.speech_engine
        data:
          type: normal
          who: common
          message: The timer for the kitchen is finished
  mode: queued
  max: 10
- id: '1696356974829'
  alias: Scheduled Reset
  description: Reset all context entities for the next day at the appropriate times
  trigger:
  - platform: time
    at: 00:00:00
    id: midnight
  - platform: time
    at: input_datetime.audible_notification_off
    id: audible-off
  - platform: time
    at: input_datetime.kallen_school_day_end
    id: school-end
  - platform: state
    entity_id: sensor.twitch_ironnerd24
    from: streaming
    to: offline
    id: stream-offline
  - platform: time
    at: 04:00:00
    id: 4am
  - platform: time
    at: '16:00:00'
    id: 4pm
  - platform: time
    at: 06:00:00
    id: 6am
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: midnight
      sequence:
      - service: script.scheduling_reset
        data: {}
      - service: script.kallen_school_reset_late
        data: {}
      - service: automation.turn_on
        target:
          entity_id:
          - automation.scheduled_alarm_rearm
          - automation.scheduled_alarm_disarm
        data: {}
      - service: input_boolean.turn_off
        target:
          entity_id:
          - input_boolean.skip_disarm
          - input_boolean.skip_rearm
        data: {}
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.tomorrow_corrected_high_temp'') | int }}'
        target:
          entity_id: input_number.today_corrected_high_temp
      - service: input_number.set_value
        target:
          entity_id:
          - input_number.back_door_opened_today
          - input_number.front_door_opened_today
          - input_number.basement_studio_door_opened_today
        data:
          value: 0
    - conditions:
      - condition: trigger
        id: audible-off
      sequence:
      - service: script.reset_annc_switches
        data: {}
    - conditions:
      - condition: trigger
        id: school-end
      sequence:
      - service: script.kallen_school_reset
        data: {}
    - conditions:
      - condition: trigger
        id: stream-offline
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.tony_streaming_today
        data: {}
    - conditions:
      - condition: trigger
        id: 4am
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id:
          - input_boolean.kallen_morning_meds_taken
          - input_boolean.kallen_night_meds_taken
          - input_boolean.tony_morning_meds_taken
          - input_boolean.tina_morning_meds_taken
          - input_boolean.tony_afternoon_meds_taken
        data: {}
    - conditions:
      - condition: trigger
        id: 6am
      sequence:
      - if:
        - condition: state
          entity_id: sensor.twitch_ironnerd24
          state: offline
        then:
        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.tony_streaming_today
          data: {}
    - conditions:
      - condition: trigger
        id: 4pm
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id:
          - input_boolean.tony_night_meds_taken
          - input_boolean.tina_night_meds_taken
        data: {}
  mode: restart
- id: '1696361494561'
  alias: Turn On Audible Notifications
  description: ''
  trigger:
  - platform: time
    at: input_datetime.audible_notification_on
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.audible_notifications
    data: {}
    alias: Turn on audible notifications
  - service: switch.turn_off
    target:
      entity_id:
      - switch.living_room_echo_dot_do_not_disturb_switch
    data: {}
    alias: Turn off DND mode on Living Room Echo Dot
  - service: script.volume_reset
    data: {}
    alias: Reset volumes
  mode: single
  initial_state: true
- id: '1696361569078'
  alias: Turn Off Audible Notifications
  description: ''
  trigger:
  - platform: time
    at: input_datetime.audible_notification_off
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  action:
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.audible_notifications
    data: {}
    alias: Turn off audible notifications
  mode: single
  initial_state: true
- id: '1696361739711'
  alias: Kallen Briefings
  description: ''
  trigger:
  - platform: time
    at: input_datetime.kallen_morning_briefing
    id: kallen-morning
    alias: Morning Briefing Time
  - platform: time
    at: input_datetime.kallen_nightly_briefing
    id: kallen-nightly
    alias: Nightly Briefing Time
  condition:
  - condition: state
    entity_id: input_boolean.kallen_overnight
    state: 'off'
    alias: Kallen is not staying overnight elsewhere
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
    alias: We are not on vacation
  action:
  - choose:
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id: kallen-morning
        - condition: state
          entity_id: input_boolean.kallen_morning_briefing
          state: 'off'
        alias: Morning Briefing
      sequence:
      - service: script.kallen_morning_briefing
        data: {}
        alias: Run morning briefing script
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id: kallen-nightly
        - condition: state
          entity_id: input_boolean.kallen_nightly_briefing
          state: 'off'
        alias: Nightly Briefing
      sequence:
      - service: script.kallen_nightly_briefing
        data: {}
        alias: Run nightly briefing script
    alias: Choose briefing
  mode: single
- id: '1696362054868'
  alias: House Briefings
  description: ''
  trigger:
  - platform: time
    at: input_datetime.morning_briefing
    id: house-morning
    alias: Morning Briefing Time
  - platform: time
    at: input_datetime.daily_briefing
    id: house-daily
    alias: Daily Briefing Time
  - platform: time
    at: input_datetime.nightly_briefing
    id: house-nightly
    alias: Nightly Briefing Time
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
    alias: We are not on vacation
  action:
  - alias: Choose briefing
    choose:
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id: house-morning
        - condition: state
          entity_id: input_boolean.good_morning
          state: 'off'
        alias: Morning Briefing
      sequence:
      - alias: Skip if Kallen has school but stayed overnight elsewhere
        if:
        - condition: template
          value_template: "{% if is_state('input_boolean.kallen_school_today','on')
            and is_state('input_boolean.kallen_overnight','on') %}\n  false\n{% else
            %}\n  true\n{% endif %}\n"
          alias: If Kallen was not elsewhere overnight on a school morning
        then:
        - service: script.morning_briefing
          data:
            who: '{{ ''alexa_everywhere'' if is_state(''binary_sensor.master_bedroom_occupied'',''on'')
              else ''common'' }}

              '
          alias: Run morning briefing script
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id: house-daily
        - condition: state
          entity_id: input_boolean.daily_briefing
          state: 'off'
        alias: Daily Briefing
      sequence:
      - service: script.daily_briefing
        data:
          who: '{{ ''alexa_everywhere'' if is_state(''binary_sensor.master_bedroom_occupied'',''on'')
            else ''common'' }}

            '
        alias: Run daily briefing script
    - conditions:
      - condition: and
        conditions:
        - condition: trigger
          id: house-nightly
        - condition: state
          entity_id: input_boolean.nightly_briefing
          state: 'off'
        alias: Nightly Briefing
      sequence:
      - service: script.nightly_briefing
        data:
          who: '{{ ''alexa_everywhere'' if is_state(''binary_sensor.master_bedroom_occupied'',''on'')
            else ''common'' }}

            '
        alias: Run nightly briefing script
  mode: single
- id: '1696362140540'
  alias: Kallen Briefing Location Change
  description: ''
  trigger:
  - platform: state
    entity_id: input_boolean.kallen_awake
    from: 'off'
    to: 'on'
    alias: When Kallen wakes up
  condition:
  - condition: state
    entity_id: input_boolean.kallen_school_today
    state: 'on'
    alias: Kallen has school today
  - condition: state
    entity_id: input_boolean.kallen_overnight
    state: 'off'
    alias: Kallen did not stay overnight elsewhere
  action:
  - service: input_select.select_option
    data:
      option: Common Areas
    target:
      entity_id: input_select.kallen_morning_briefing_location
    alias: Move morning briefing to common areas
  mode: single
- id: '1696539209438'
  alias: Tony Custom Meds Handler
  description: ''
  trigger:
  - platform: time
    at: input_datetime.tony_custom_meds_notify_p1
    alias: Notify 1
    id: p1-notify
  - platform: state
    entity_id:
    - input_boolean.tony_custom_meds_taken_p1
    from: 'off'
    to: 'on'
    id: p1-taken
    alias: Taken 1
  condition: []
  action:
  - variables:
      trigger: '{{ trigger.id }}'
      num: '{{ trigger[:2] }}'
      reason: '{{ trigger.split(''-'')[1] }}'
  - if:
    - condition: template
      value_template: '{% set active = ''input_boolean.tony_custom_meds_tracker_''
        + num %}

        {{ is_state(active,''on'') }}'
      alias: Check tracker
    then:
    - if:
      - condition: template
        value_template: '{{ reason == ''notify'' }}'
        alias: Is this a notification
      then:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: '{{ ''input_boolean.tony_custom_meds_taken_'' + num }}'
        alias: Turn off "taken" boolean
      alias: Turn off "taken" boolean if this is a notification
    - service: script.tony_custom_meds
      data:
        num: '{{ num }}'
        reason: '{{ reason }}'
      alias: Run custom meds script
    alias: Run custom meds script if tracker is active
  mode: parallel
  max: 10
- id: '1696556688808'
  alias: Rain Window Warning
  description: Warn when it starts raining and a window is open
  trigger:
  - platform: state
    entity_id: binary_sensor.raining
    from: 'off'
    to: 'on'
    alias: Rain starts
  condition:
  - condition: state
    entity_id: binary_sensor.windows
    state: 'on'
    alias: Windows are open
  action:
  - variables:
      porch: "{% set windows = states('sensor.windows_open') | int %}  {% set front
        = states('sensor.front_windows_open') | int %} {% if windows == front %}\n
        \ true\n{% else %}\n  false\n{% endif %}"
      message: "{% if porch == 'true' %}\n  It is raining and a window by the porch
        is open. This is generally acceptable, but please close it if the wind is
        blowing in.\n{% else %}\n  It is raining and there are windows open in the
        house. Please close them!\n{% endif %}\n"
    alias: Define variables
  - parallel:
    - service: script.text_notify
      data:
        type: alert
        who: all
        title: WINDOWS ARE OPEN!
        message: '{{ message }}'
        tag: rain-window-warning
      alias: Send text notification
    - service: script.speech_engine
      data:
        who: everywhere
        type: weather
        message: '{{ message }}'
      alias: TTS notification
    - service: script.living_room_lights_alert
      data:
        type: blue
        duration: 10
      alias: Light alert in living room
    - if:
      - condition: state
        entity_id: binary_sensor.basement_occupied
        state: 'on'
        alias: Basement is occupied
      then:
      - service: script.basement_lights_alert
        data:
          type: blue
          duration: 10
        alias: Light alert in basement
      alias: Light alert in basement, if occupied
    alias: Send the various alerts
  - wait_template: '{{ is_state(''binary_sensor.windows'',''off'') or is_state(''binary_sensor.raining'',''off'')
      }}'
    timeout: 00:15:00
    continue_on_timeout: true
    alias: Wait until windows are shut, or it happens to stop raining
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ is_state(''binary_sensor.windows'',''off'') and is_state(''binary_sensor.raining'',''on'')
          }}'
        alias: Windows closed and still raining
      sequence:
      - service: script.text_notify
        data:
          type: alert
          who: all
          message: clear_notification
          tag: rain-window-warning
        alias: Clear text notification
      - service: script.speech_engine
        data:
          who: common
          type: weather
          message: Windows are now closed. Thank you, and enjoy your dry house.
        alias: TTS notification
    - conditions:
      - condition: template
        value_template: '{{ is_state(''binary_sensor.raining'',''off'') }}'
        alias: Stopped raining
      sequence:
      - service: script.text_notify
        data:
          type: alert
          who: all
          message: clear_notification
          tag: rain-window-warning
        alias: Clear text notification
      - service: script.speech_engine
        data:
          who: common
          type: weather
          message: Nevermind, it has stopped raining. Feel free to do whatever you'd
            like with the windows.
        alias: TTS notification
    default:
    - service: script.speech_engine
      data:
        who: common
        type: weather
        message: Well, I guess no one cares if the house floods. Suit yourself, but
          do not say I didn't warn you.
      alias: TTS notification
    alias: After wait completed
  mode: single
- id: '1696884613752'
  alias: Tony Sleep Handling
  description: Awareness of when Tony is asleep or wakes up
  trigger:
  - platform: event
    event_type: wakeup_event
    event_data:
      who: tony
      type: alarm
    context:
      user_id:
      - c3909d27048140729f002aaef0391775
    alias: Any Alarm
    id: wake-alarm
  - platform: event
    event_type: wakeup_event
    event_data:
      who: tony
      type: wakeup
    context:
      user_id:
      - c3909d27048140729f002aaef0391775
    alias: Wakeup
    id: wake-sched
  - platform: zone
    entity_id: person.tony_stork
    zone: zone.home
    event: leave
    alias: Leave Home
    id: wake-leave
  - platform: conversation
    command: Tony is awake
    id: wake-sentence
    alias: Sentence
  - platform: state
    entity_id:
    - binary_sensor.tony_s_iphone_focus
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 30
    alias: Focus off
    id: wake-focus
  - platform: state
    entity_id:
    - binary_sensor.tony_desktop_on
    from: 'off'
    to: 'on'
    alias: Computer
    id: wake-computer
  condition: []
  action:
  - variables:
      trigger: '{{ trigger.id }}'
      type: '{{ trigger.split(''-'')[0] }}'
      reason: '{{ trigger.split(''-'')[1] }}'
    alias: Define variables
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ type == ''wake'' }}'
        alias: Wakeup
      sequence:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.tony_awake
        alias: Set context that I am awake
    alias: Routing
  mode: restart
- id: '1696985389177'
  alias: Master Bedroom Adaptive Resync
  description: Deals with situations where the master bedroom lights should be adaptive
    but end up out of sync
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.master_bedroom_sync_issue
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: adaptive_lighting.apply
    data:
      entity_id: switch.adaptive_lighting_master_bedroom
      adapt_brightness: '{{ is_state(''switch.adaptive_lighting_adapt_brightness_master_bedroom'',''on'')
        }}'
  mode: restart
- id: '1697819133179'
  alias: Give Me Darkness
  description: Automatically trigger Give Me Darkness if it has not already happened
  trigger:
  - platform: template
    value_template: '{% from ''time.jinja'' import ct %}

      {% set ct = ct() | int %}

      {% set bedtime = states(''input_datetime.kallen_bedtime'') | int + 1800 %}

      {{ ct >= bedtime }}'
    alias: When it is half an hour past K's bedtime
  condition:
  - condition: state
    entity_id: input_boolean.give_me_darkness
    state: 'off'
    alias: Give Me Darkness isn't already on
  - condition: state
    entity_id: binary_sensor.parents_home
    state: 'on'
    alias: We are home
  action:
  - alias: Announce activation
    service: script.status_annc
    data:
      call_interruption: 1
      call_give_me_darkness: 1
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: script.give_me_darkness
    data:
      auto: 1
    alias: Run the original Give Me Darkness script
  mode: single
- id: '1698169213378'
  alias: Speedtest Update
  description: Update the speedtest sensors, with exceptions for considerate network
    usage
  trigger:
  - platform: time_pattern
    hours: /1
  condition:
  - condition: state
    entity_id: sensor.twitch_ironnerd24
    state: offline
  - condition: state
    entity_id: input_boolean.studio_quiet
    state: 'off'
  - condition: state
    entity_id: input_boolean.gaming_mode
    state: 'off'
  action:
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.speedtest_download
    alias: Speedtest Download
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.speedtest_upload
    alias: Speedtest Upload
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.speedtest_ping
    alias: Speedtest Ping
  mode: restart
